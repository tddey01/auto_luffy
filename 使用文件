RBAC组件使用文档


1 将RBAC组件拷贝到项目中

2 将RBAC目录下的migrations目录中的数据文件记录删除

3 业务开发

    3.1  对于用户表处理 o2o将用户表拆分到两张表中 如：
    ----- rbac 用户表
            class UserInfo(models.Model):
    """
    用户表
    """
    name = models.CharField(verbose_name='用户名', max_length=32)
    password = models.CharField(verbose_name='密码', max_length=64)
    email = models.CharField(verbose_name='邮箱', max_length=32)
    roles = models.ManyToManyField(verbose_name='拥有的所有角色', to='Role', blank=True, )

    def __str__(self):
        return self.name

    -------app 用户表

    class UserInfo(models.Model):
    '''
    用户表
    '''
    user = models.OneToOneField(verbose_name='用户', to=RbacUserInfo, on_delete=models.CASCADE)
    phone = models.CharField(verbose_name='联系方式', max_length=32)
    lavel_choices = (
        (1, 'T1'),
        (2, 'T2'),
        (3, 'T3'),
    )
    level = models.IntegerField(verbose_name='部门', choices=lavel_choices)
    depart = models.ForeignKey(verbose_name='部门', to='Department', on_delete=models.CASCADE)

    def __init__(self):
        return self.user.name

    缺点 用户数据分散

    优点  利用上rbac中的用户管理的功能

  3.2 将用户表整合到一张表  （推荐使用这个方法）
  rbac/models.py
        class UserInfo(models.Model):
    '''
    用户表
    '''
    # user = models.OneToOneField(verbose_name='用户', to=RbacUserInfo, on_delete=models.CASCADE)
    name = models.CharField(verbose_name='用户名', max_length=32)
    password = models.CharField(verbose_name='密码', max_length=64)
    email = models.CharField(verbose_name='邮箱', max_length=32)
    roles = models.ManyToManyField(verbose_name='拥有的所有角色', to=Role, blank=True, )  # 严重提示  Role不要加引号

    def __init__(self):
        return self.user.name

    class Meta:
        # django 在以后再做数据库迁移时，不再为UserInfo类创建相关的表及表结构了
        # 此类可以当做 '父类' 别其他Model类继承 ，过度给他类
        abstract = True

  ---
  业务/models.py
  class UserInfo(RbacUserInfo):
    '''
    用户表
    '''
    # user = models.OneToOneField(verbose_name='用户', to=RbacUserInfo, on_delete=models.CASCADE)

    phone = models.CharField(verbose_name='联系方式', max_length=32)
    lavel_choices = (
        (1, 'T1'),
        (2, 'T2'),
        (3, 'T3'),
    )
    level = models.IntegerField(verbose_name='部门', choices=lavel_choices)
    depart = models.ForeignKey(verbose_name='部门', to='Department', on_delete=models.CASCADE)

    def __init__(self):
        return self.user.name

  优点  将所有的用户信息放到一张表(业务的用户表中)
  缺点  在rbac中所有关于用户表的操作，不能使用了

  注意事项：
    rbac中两处使用了用户表
       - 用户管理
       - 权限分配时用户列表 [读取业务中的用户表即可，]


  对于rbac中代码修改
    1 在urls中用户表的增删改查和修改密码功能删除
    2 在权限分配只时，读取用户表变成通过配置文件来进行指定并导入

3.3  业务开发
    - 用户表的增删改查
    - 主机表的增删改查

    感受 比啊内心业务功能是 出现大量拷贝

 注意 如果要是rbac中的模板  怎需要将模板中的 导航条 + 菜单 当业务上线之前开发完成之后 上线之前再把他拿回来
     {% multi_menu request %}
     {% breadcrumb request %}


4 权限应用
    4.1  将菜单和导航条添加到loyou.html中
    """
    <div class="pg-body">
    <div class="left-menu">
        <div class="menu-body">
            {% multi_menu request %}
        </div>

    </div>
    <div class="right-body">
        {% breadcrumb request %}
        {% block content %} {% endblock %}
    </div>
    </div>
    """
    4.2 应用的中间

        MIDDLEWARE = [
            'django.middleware.security.SecurityMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
            'rbac.middlewares.rbac.MiddlewareMixin',
        ]
    4.3 白名单处理  settins.py  中添加一下配置
            VALID_URL_LIST = [
                '/login/',
                '/admin/.*',
            ]

    4.4 权限初始化 在setting，py添加一下配置

            PERMISSION_SISSION_KEY = 'luffy_permission_list_url_key'
            MENU_SISSION_KEY = 'luffy_permission_menu_key'
    4.5 批量操作权限时，自动发现路由中的所有URL时，应该排除的URL
            AUTO_DEISCOVER_EXCLUDE = [
                '/admin/.*',
            ]
    4.6 用户登录逻辑






